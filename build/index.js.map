{"version":3,"file":"index.js","sources":["../source/index.ts"],"sourcesContent":["import { createServer, Server, IncomingMessage, ServerResponse } from 'http';\nimport vamtigerRequire, { Params as RequireParams } from 'vamtiger-require';\nimport { ReferenceObjectPath } from 'vamtiger-reference-object-path';\nimport Argv = require('vamtiger-argv');\n\nconst referenceObjectPath = require('vamtiger-reference-object-path') as ReferenceObjectPath;\n\nlet server: Server | undefined;\n\nexport default function vamtigerDebugServer({ port, handleRequest: handleRequestPath }: Params) {\n    const handleRequestModule = handleRequestPath && vamtigerRequire({\n        path: handleRequestPath\n    }) as typeof handleRequest;\n\n    server = !server ? createServer(handleRequestModule || handleRequest) : server;\n\n    server.listen(port);\n\n    return server;\n}\n\nexport function stopServer() {\n    if (server)\n        server.close();\n\n    server = undefined;\n}\n\nasync function handleRequest(request: IncomingMessage, response: ServerResponse) {\n    const body = await getBody({ request }) as Body;\n    const callback = (error: Error, result: any) => response.end(JSON.stringify({ error, result }));\n\n    let result;\n\n    response.setHeader(HeaderKey.contentType, HeaderValue.json);\n\n    try {\n        if (body.callback) {\n            body.arguments && body.arguments.push(callback);\n            body.instanceArguments && body.instanceArguments.push(callback);\n\n            result = vamtigerRequire(body);\n        } else {\n            result = vamtigerRequire(body);\n\n            if (body.instanceGetPath)\n                result = referenceObjectPath({\n                    object: result,\n                    path: body.instanceGetPath\n                });\n\n            response.end(JSON.stringify({ result }));\n        }\n    } catch(error){\n        console.error(error);\n\n        response.end(JSON.stringify({ error }));\n    };\n}\n\nexport function getBody({ request }: GetBodyParams): Promise<AnyObject> {\n    const body = [] as Uint8Array[];\n\n    return new Promise(resolve => {\n        request.on(\n            Event.data,\n            chunk => body.push(chunk)\n        );\n        request.on(\n            Event.end,\n            () => Promise\n                .resolve(Buffer.concat(body).toString())\n                .then(JSON.parse)\n                .then(resolve)\n        )\n    })\n}\n\nexport interface Params {\n    port: string | number;\n    handleRequest?: string;\n}\n\nexport interface GetBodyParams {\n    request: IncomingMessage\n}\n\nexport interface Body extends RequireParams {\n    callback?: boolean;\n    instanceGetPath?: string;\n}\n\nexport interface AnyObject {\n    [key: string]: any;\n}\n\nexport enum Event {\n    data = 'data',\n    end = 'end'\n}\n\nexport enum HeaderKey {\n    contentType = 'Content-Type'\n}\n\nexport enum HeaderValue {\n    json = 'application/json'\n}\n\nexport enum CommandlineArgs {\n    port = 'port',\n    handleRequest = 'handleRequest'\n}\n\nexport type VamtigerDebugServer = typeof vamtigerDebugServer;"],"names":["referenceObjectPath","require","server","vamtigerDebugServer","port","handleRequest","handleRequestPath","handleRequestModule","vamtigerRequire","path","createServer","listen","stopServer","close","undefined","request","response","body","getBody","callback","error","result","end","JSON","stringify","setHeader","HeaderKey","contentType","HeaderValue","json","arguments","push","instanceArguments","instanceGetPath","object","console","Promise","resolve","on","Event","data","chunk","Buffer","concat","toString","then","parse","CommandlineArgs"],"mappings":"sfAKA,MAAMA,oBAAsBC,QAAQ,kCAEpC,IAAIC,OAEJ,SAAwBC,qBAAoBC,KAAEA,EAAMC,cAAeC,IAC/D,MAAMC,EAAsBD,GAAqBE,iBAC7CC,KAAMH,IAOV,OAJAJ,OAAUA,QAASQ,kBAAaH,GAAuBF,gBAEhDM,OAAOP,GAEPF,OAGX,SAAgBU,aACRV,QACAA,OAAOW,QAEXX,YAASY,EAGb,SAAeT,cAAcU,EAA0BC,mDACnD,MAAMC,QAAaC,SAAUH,QAAAA,IACvBI,EAAW,CAACC,EAAcC,IAAgBL,EAASM,IAAIC,KAAKC,WAAYJ,MAAAA,EAAOC,OAAAA,KAErF,IAAIA,EAEJL,EAASS,UAAUC,kBAAUC,YAAaC,oBAAYC,MAEtD,IACQZ,EAAKE,UACLF,EAAKa,WAAab,EAAKa,UAAUC,KAAKZ,GACtCF,EAAKe,mBAAqBf,EAAKe,kBAAkBD,KAAKZ,GAEtDE,EAASb,gBAAgBS,KAEzBI,EAASb,gBAAgBS,GAErBA,EAAKgB,kBACLZ,EAASrB,qBACLkC,OAAQb,EACRZ,KAAMQ,EAAKgB,mBAGnBjB,EAASM,IAAIC,KAAKC,WAAYH,OAAAA,MAEpC,MAAMD,GACJe,QAAQf,MAAMA,GAEdJ,EAASM,IAAIC,KAAKC,WAAYJ,MAAAA,QAItC,SAAgBF,SAAQH,QAAEA,IACtB,MAAME,KAEN,OAAO,IAAImB,QAAQC,IACftB,EAAQuB,GACJC,cAAMC,KACNC,GAASxB,EAAKc,KAAKU,IAEvB1B,EAAQuB,GACJC,cAAMjB,IACN,IAAMc,QACDC,QAAQK,OAAOC,OAAO1B,GAAM2B,YAC5BC,KAAKtB,KAAKuB,OACVD,KAAKR,OAuBtB,SAAYE,GACRA,cACAA,YAFJ,CAAYA,gBAAAA,oBAKAb,oBAAAA,mDAIAE,sBAAAA,iDAIZ,SAAYmB,GACRA,cACAA,gCAFJ,CAAYA,0BAAAA"}